// src/orders/orders.service.ts - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç TypeScript errors

import { Injectable, NotFoundException, BadRequestException, forwardRef, Inject, ForbiddenException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model} from 'mongoose';
import { Types } from 'mongoose';
import { Order, OrderDocument } from './schemas/order.schema';
import { CreateOrderDto } from './dto/create-order.dto';
import { CandidatesService } from '../candidates/candidates.service';
import { CouponsService } from '../coupons/coupons.service';
import { Coupon } from '../coupons/schemas/coupon.schema'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import

@Injectable()
export class OrdersService {
  constructor(
    @InjectModel(Order.name) private orderModel: Model<OrderDocument>,
    @Inject(forwardRef(() => CandidatesService)) private candidatesService: CandidatesService,
    private readonly couponsService: CouponsService,
  ) {}

async create(createOrderDto: CreateOrderDto, userId?: string): Promise<Order> {
  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç type declaration
  let couponId: any | null = null;
  let couponDiscount = 0;
  let validatedCoupon: Coupon | null = null; // ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ type ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  
  if (createOrderDto.couponCode) {
    try {
      console.log('üîç Processing coupon in order creation:', createOrderDto.couponCode);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
      const subtotal = createOrderDto.subtotalPrice;
      const promotionDiscount = createOrderDto.promotionDiscount || 0;
      const afterPromotionPrice = subtotal - promotionDiscount;
      
      console.log('üí∞ Order pricing:', {
        subtotal,
        promotionDiscount,
        afterPromotionPrice,
        couponCode: createOrderDto.couponCode
      });
      
      // ‚úÖ validateCoupon ‡∏à‡∏∞ return Coupon object ‡∏´‡∏£‡∏∑‡∏≠ throw error
      validatedCoupon = await this.couponsService.validateCoupon(
        createOrderDto.couponCode, 
        afterPromotionPrice,
        userId
      );
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° null check
      if (validatedCoupon) {
        console.log('‚úÖ Coupon validated successfully:', {
          id: validatedCoupon._id,
          code: validatedCoupon.code,
          discountPercent: validatedCoupon.discountPercent
        });
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
        couponDiscount = this.couponsService.calculateDiscount(validatedCoupon, afterPromotionPrice);
        
        console.log('üíµ Calculated coupon discount:', couponDiscount);
        
        // ‡πÄ‡∏Å‡πá‡∏ö coupon ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Order
        couponId = validatedCoupon._id;
      }
      
    } catch (error) {
      console.error('‚ùå Error validating coupon during order creation:', error);
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á ‡πÉ‡∏´‡πâ throw error ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°
      throw new BadRequestException(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á: ${error.message}`);
    }
  }

  // 1. Create candidates
  const createdCandidates = await Promise.all(
    createOrderDto.candidates.map(candidateDto => 
      this.candidatesService.create(candidateDto)
    )
  );

  // 2. Create order
  const newOrder = new this.orderModel({
    OrderType: createOrderDto.OrderType,
    OrderStatus: 'awaiting_payment',
    TrackingNumber: this.generateTrackingNumber(),
    user: userId,
    candidates: createdCandidates.map(candidate => candidate._id),
    SubTotalPrice: createOrderDto.subtotalPrice,
    promotionDiscount: createOrderDto.promotionDiscount || 0,
    couponDiscount: couponDiscount,
    TotalPrice: createOrderDto.totalPrice,
    services: createOrderDto.services.map(service => ({
      service: service.service,
      title: service.title,
      quantity: service.quantity,
      price: service.price
    })),
    payment: null,
    coupon: couponId
  });

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Order ‡∏Å‡πà‡∏≠‡∏ô
  const savedOrder = await newOrder.save();
  
  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á ‡πÉ‡∏´‡πâ mark ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  if (validatedCoupon && savedOrder) {
    try {
      console.log('üìù Marking coupon as used:', validatedCoupon._id);
      await this.couponsService.markAsUsed(
        validatedCoupon._id.toString(), 
        savedOrder._id.toString()
      );
      console.log('‚úÖ Coupon marked as used successfully');
    } catch (markError) {
      console.error('‚ùå Error marking coupon as used:', markError);
      // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞ mark coupon ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà Order ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    }
  }

  return savedOrder;
}

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°...
  async findAll(): Promise<Order[]> {
    return this.orderModel.find()
      .populate('candidates')
      .populate('user')
      .populate('payment')
      .exec();
  }

  async findOne(id: string): Promise<Order> {
    const order = await this.orderModel.findById(id)
      .populate('candidates')
      .populate('user')
      .populate('payment')
      .exec();
    
    if (!order) {
      throw new NotFoundException(`Order with ID ${id} not found`);
    }
    
    return order;
  }

  async findByUserId(userId: string): Promise<Order[]> {
    return this.orderModel.find({ user: userId })
      .populate('candidates')
      .populate('payment')
      .exec();
  }

  async updateOrderStatus(id: string, status: string): Promise<Order> {
    const validStatuses = ['awaiting_payment', 'pending_verification', 'payment_verified', 'processing', 'completed', 'cancelled'];
    
    if (!validStatuses.includes(status)) {
      throw new BadRequestException(`Invalid order status. Must be one of: ${validStatuses.join(', ')}`);
    }
    
    const updatedOrder = await this.orderModel
      .findByIdAndUpdate(
        id, 
        { OrderStatus: status }, 
        { new: true }
      )
      .populate('candidates')
      .populate('user')
      .populate('payment')
      .exec();
    
    if (!updatedOrder) {
      throw new NotFoundException(`Order with ID ${id} not found`);
    }
    
    return updatedOrder;
  }

async deleteOrder(id: string): Promise<any> {
  console.log('üóëÔ∏è Starting order deletion process:', id);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const order = await this.orderModel.findById(id).exec();
  if (!order) {
    throw new NotFoundException(`Order with ID ${id} not found`);
  }
  
  console.log('üìã Order found:', {
    id: order._id,
    status: order.OrderStatus,
    hasCoupon: !!order.coupon,
    couponId: order.coupon
  });
  
  // ‚úÖ Step 1: Release coupon ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (order.coupon) {
    console.log('üé´ Order has coupon, releasing it...');
    try {
      await this.couponsService.releaseCoupon(id);
    } catch (couponError) {
      console.error('‚ùå Error releasing coupon, but continuing with order deletion:', couponError);
      // ‡πÑ‡∏°‡πà stop ‡∏Å‡∏≤‡∏£‡∏•‡∏ö Order ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ coupon release ‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
  } else {
    console.log('‚ÑπÔ∏è Order has no coupon to release');
  }
  
  // ‚úÖ Step 2: Delete candidates
  if (order.candidates && order.candidates.length > 0) {
    console.log(`üë• Deleting ${order.candidates.length} candidates...`);
    try {
      await Promise.all(
        order.candidates.map(candidateId => 
          this.candidatesService.remove(candidateId.toString())
        )
      );
      console.log('‚úÖ All candidates deleted successfully');
    } catch (error) {
      console.error('‚ùå Error deleting candidates:', error);
      // ‡πÑ‡∏°‡πà stop ‡∏Å‡∏≤‡∏£‡∏•‡∏ö Order
    }
  }
  
  // ‚úÖ Step 3: Delete order
  console.log('üóëÔ∏è Deleting order...');
  const result = await this.orderModel.findByIdAndDelete(id).exec();
  
  if (!result) {
    throw new NotFoundException(`Order with ID ${id} not found during deletion`);
  }
  
  console.log('‚úÖ Order deleted successfully:', id);
  
  return {
    success: true,
    message: 'Order deleted successfully',
    deletedOrder: result,
    couponReleased: !!order.coupon
  };
}

  async findByTrackingNumber(trackingNumber: string): Promise<Order> {
    const order = await this.orderModel.findOne({ TrackingNumber: trackingNumber })
      .populate('candidates')
      .populate('user')
      .populate('payment')
      .exec();
    
    if (!order) {
      throw new NotFoundException(`Order with tracking number ${trackingNumber} not found`);
    }
    
    return order;
  }

  private generateTrackingNumber(): string {
    const prefix = 'SCT';
    const timestamp = Date.now().toString().substring(5);
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    return `${prefix}${timestamp}${random}`;
  }

  async markOrderAsReviewed(orderId: string, reviewId: string): Promise<Order> {
    console.log(`Marking order ${orderId} as reviewed with review ${reviewId}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const order = await this.orderModel.findById(orderId);
    if (!order) {
      throw new NotFoundException(`Order with ID ${orderId} not found`);
    }
    
    console.log('Current order review status:', { 
      isReviewed: order.isReviewed, 
      reviewedAt: order.reviewedAt, 
      review: order.review 
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Review
    const updatedOrder = await this.orderModel.findByIdAndUpdate(
      orderId,
      {
        $set: {
          isReviewed: true,
          reviewedAt: new Date(),
          review: reviewId
        }
      },
      { new: true }
    )
    .populate('candidates')
    .populate('user')
    .populate('payment')
    .populate('review')
    .exec();

    if (!updatedOrder) {
      throw new NotFoundException(`Order with ID ${orderId} not found after update`);
    }
    
    console.log('Order marked as reviewed successfully');
    
    return updatedOrder;
  }

async findReviewableOrdersByUserId(userId: string): Promise<Order[]> {
  console.log('Looking for reviewable orders for user:', userId);

  // ‡∏î‡∏∂‡∏á order ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ completed ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ review
  const orders = await this.orderModel.find({
    user: userId,
    OrderStatus: 'completed',
    isReviewed: { $ne: true } // ‡πÉ‡∏ä‡πâ $ne ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà isReviewed ‡πÄ‡∏õ‡πá‡∏ô false ‡∏´‡∏£‡∏∑‡∏≠ null
  })
  .populate('candidates')
  .populate('payment')
  .exec();

  console.log(`Found ${orders.length} reviewable orders`);
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
  if (orders.length > 0) {
    console.log('Sample order:', {
      id: orders[0]._id,
      status: orders[0].OrderStatus,
      isReviewed: orders[0].isReviewed
    });
  }

  return orders;
}

async checkOrderReviewStatus(orderId: string, userId: string): Promise<any> {
  const order = await this.findOne(orderId);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Order ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (order.user._id.toString() !== userId) {
    throw new ForbiddenException('You do not have permission to check this order');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order
  const isCompleted = order.OrderStatus === 'completed';
  
  return {
    orderId: order._id,
    canReview: isCompleted && !order.isReviewed,
    isCompleted,
    isReviewed: order.isReviewed,
    reviewedAt: order.reviewedAt,
    orderStatus: order.OrderStatus
  };
}
}