// src/coupons/coupons.controller.ts - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ

import { Controller, Get, Post, Body, Param, Put, Delete, UseGuards, Request, BadRequestException, InternalServerErrorException, Query } from '@nestjs/common';
import { CouponsService } from './coupons.service';
import { CreateCouponDto } from './dto/create-coupon.dto';
import { UpdateCouponDto } from './dto/update-coupon.dto';
import { CreatePublicCouponDto } from './dto/create-public-coupon.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../decorators/roles.decorator';
import { Role } from '../enum/role.enum';
import { User } from 'src/decorators/user.decorator';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Coupon, CouponDocument } from './schemas/coupon.schema';

@Controller('api/coupons')
export class CouponsController {
  constructor(
    private readonly couponsService: CouponsService,
    @InjectModel(Coupon.name) private couponModel: Model<CouponDocument> // ‡πÄ‡∏û‡∏¥‡πà‡∏° inject model
  ) {}

  @Post()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  create(@Body() createCouponDto: CreateCouponDto) {
    return this.couponsService.create(createCouponDto);
  }

  @Post('public')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  createPublicCoupon(@Body() createPublicCouponDto: CreatePublicCouponDto) {
    return this.couponsService.createPublicCoupon(createPublicCouponDto);
  }

  @Get()
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  findAll() {
    return this.couponsService.findAll();
  }

  @Get('public')
  @UseGuards(JwtAuthGuard)
  async findPublicCoupons(@User() user) {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      const publicCoupons = await this.couponsService.findPublicCoupons();
      
      // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ User ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏•‡∏°‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (user && user.userId) {
        // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà User ‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å originalCouponId
        const claimedCoupons = await this.couponModel.find({
          claimedBy: new Types.ObjectId(user.userId),
          originalCouponId: { $ne: null } // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ originalCouponId
        }).exec();
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà User ‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        const claimedOriginalIds = claimedCoupons.map(coupon => 
          coupon.originalCouponId.toString()
        );
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß
        const publicCouponsWithClaimInfo = publicCoupons.map(coupon => {
          const isClaimed = claimedOriginalIds.includes(coupon._id.toString());
          const couponObj = JSON.parse(JSON.stringify(coupon)); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô plain object
          return {
            ...couponObj,
            isClaimed,
            canClaim: !isClaimed
          };
        });
        
        return publicCouponsWithClaimInfo;
      }
      
      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ User ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      return publicCoupons.map(coupon => {
        const couponObj = JSON.parse(JSON.stringify(coupon)); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô plain object
        return {
          ...couponObj,
          isClaimed: false,
          canClaim: true
        };
      });
    } catch (error) {
      console.error('Error in findPublicCoupons:', error);
      throw new BadRequestException('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÑ‡∏î‡πâ');
    }
  }


  @Get('claimed-status')
  @UseGuards(JwtAuthGuard)
  async getClaimedStatus(@User() user, @Query('couponIds') couponIdsString: string) {
    if (!couponIdsString) {
      return {};
    }
    
    const couponIds = couponIdsString.split(',');
    
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà User ‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß
    const claimedCoupons = await this.couponModel.find({
      claimedBy: new Types.ObjectId(user.userId)
    }).exec();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà User ‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    const claimedOriginalIds = claimedCoupons.map(coupon => 
      coupon.originalCouponId ? coupon.originalCouponId.toString() : null
    ).filter(Boolean);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ï‡∏≤‡∏° ID
    const publicCoupons = await this.couponModel.find({
      _id: { $in: couponIds.map(id => new Types.ObjectId(id)) }
    }).exec();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°
    const result = {};
    publicCoupons.forEach(coupon => {
      result[coupon._id.toString()] = {
        isClaimed: claimedOriginalIds.includes(coupon._id.toString()),
        code: coupon.code
      };
    });
    
    return result;
  }

@Post('claim/:id')
@UseGuards(JwtAuthGuard)
async claimCoupon(@Param('id') id: string, @Request() req) {
  try {
    console.log('üé´ Claiming coupon:', { 
      couponId: id, 
      hasUser: !!req.user,
      user: req.user,
      userId: req.user?.userId 
    });
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ req.user ‡πÅ‡∏ó‡∏ô
    const user = req.user;
    
    if (!user || !user.userId) {
      console.error('‚ùå No user found in request');
      return {
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
        error: 'No user authentication'
      };
    }
    
    if (!id || id.length !== 24) {
      console.error('‚ùå Invalid coupon ID:', id);
      return {
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        error: 'Invalid coupon ID'
      };
    }
    
    const userCoupon = await this.couponsService.claimCoupon(id, user.userId);
    
    if (!userCoupon) {
      console.error('‚ùå Service returned null');
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ',
        error: 'Service returned null'
      };
    }
    
    console.log('‚úÖ Coupon claimed successfully:', userCoupon._id);
    
    const response = {
      success: true,
      message: '‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      coupon: {
        _id: userCoupon._id?.toString() || '',
        code: userCoupon.code || '',
        discountPercent: userCoupon.discountPercent || 0,
        description: userCoupon.description || '',
        expiryDate: userCoupon.expiryDate || new Date(),
        claimedAt: userCoupon.claimedAt || new Date()
      }
    };
    
    console.log('üì§ Sending response:', response);
    return response;
    
  } catch (error) {
    console.error('‚ùå Error in claimCoupon:', error);
    
    const errorResponse = {
      success: false,
      message: error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ',
      error: error.name || 'Unknown error'
    };
    
    console.log('üì§ Sending error response:', errorResponse);
    return errorResponse;
  }
}

  @Get('my-coupons')
  @UseGuards(JwtAuthGuard)
  async findMyCoupons(@User() user, @Query('includeUsed') includeUsed?: string) {
    try {
      // ‚úÖ ‡∏£‡∏±‡∏ö parameter ‡∏à‡∏≤‡∏Å query string
      const shouldIncludeUsed = includeUsed === 'true';
      
      const myCoupons = await this.couponsService.findUserCoupons(
        user.userId, 
        shouldIncludeUsed
      );
      
      return myCoupons.map(coupon => ({
        _id: coupon._id,
        code: coupon.code,
        discountPercent: coupon.discountPercent,
        description: coupon.description,
        expiryDate: coupon.expiryDate,
        claimedAt: coupon.claimedAt,
        isUsed: coupon.isUsed,
        usedAt: coupon.usedAt
      }));
    } catch (error) {
      console.error('Error in findMyCoupons:', error);
      throw new BadRequestException('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ');
    }
  }

  @Get(':id')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  findOne(@Param('id') id: string) {
    return this.couponsService.findOne(id);
  }

  @Put(':id')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  update(@Param('id') id: string, @Body() updateCouponDto: UpdateCouponDto) {
    return this.couponsService.update(id, updateCouponDto);
  }

  @Delete(':id')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  remove(@Param('id') id: string) {
    return this.couponsService.remove(id);
  }

  @Post('check')
  @UseGuards(JwtAuthGuard) // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ JwtAuthGuard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ user info
  async checkCoupon(
    @Body() body: { code: string, subtotal: number, promotionDiscount: number },
    @User() user // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ user info ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
  ) {
    const { code, subtotal, promotionDiscount } = body;
    
    console.log('üîç Coupon check request:', {
      code,
      subtotal,
      promotionDiscount,
      userId: user?.userId
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!code || !code.trim()) {
      throw new BadRequestException('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á');
    }
    
    if (typeof subtotal !== 'number' || subtotal <= 0) {
      throw new BadRequestException('‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    if (typeof promotionDiscount !== 'number' || promotionDiscount < 0) {
      throw new BadRequestException('‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    const afterPromotionPrice = subtotal - promotionDiscount;
    
    if (afterPromotionPrice <= 0) {
      throw new BadRequestException('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0');
    }
    
    try {
      // ‚úÖ ‡∏™‡πà‡∏á userId ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ validateCoupon ‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ
      const coupon = await this.couponsService.validateCoupon(
        code.trim(), 
        afterPromotionPrice,
        user?.userId // ‚úÖ ‡∏™‡πà‡∏á userId ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      );
      
      console.log('‚úÖ Coupon validation successful:', coupon._id);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
      const discountAmount = this.couponsService.calculateDiscount(coupon, afterPromotionPrice);
      
      const response = {
        coupon: {
          _id: coupon._id,
          code: coupon.code,
          discountPercent: coupon.discountPercent,
          description: coupon.description
        },
        discountAmount
      };
      
      console.log('‚úÖ Coupon check response:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå Coupon check error:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  @Get('survey')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  async findSurveyCoupons() {
    return this.couponsService.findSurveyCoupons();
  }


  @Post('survey-coupon')
  @UseGuards(JwtAuthGuard)
  async createSurveyCoupon(@User() user) {
    try {
      // ‚úÖ ‡πÉ‡∏ä‡πâ method ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ survey coupon ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      const userCoupon = await this.couponsService.createSurveyCoupon(user.userId);
      
      return {
        success: true,
        alreadyClaimed: false,
        message: '‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        coupon: {
          _id: userCoupon._id,
          code: userCoupon.code,
          discountPercent: userCoupon.discountPercent,
          description: userCoupon.description,
          expiryDate: userCoupon.expiryDate,
          claimedAt: userCoupon.claimedAt
        }
      };
      
    } catch (error) {
      console.error('Error in createSurveyCoupon:', error);
      
      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      if (error.message === '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß') {
        const existingCoupon = await this.couponsService.findSurveyCouponByUser(user.userId);
        
        return {
          success: true,
          alreadyClaimed: true,
          message: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß',
          coupon: existingCoupon ? {
            _id: existingCoupon._id,
            code: existingCoupon.code,
            discountPercent: existingCoupon.discountPercent,
            description: existingCoupon.description,
            expiryDate: existingCoupon.expiryDate,
            claimedAt: existingCoupon.claimedAt
          } : null
        };
      }
      
      return {
        success: false,
        alreadyClaimed: false,
        message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á',
        error: true
      };
    }
  }



  @Post('easy-code')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  async createEasyCodeCoupon(@Body() body: { 
    prefix?: string, 
    discountPercent: number, 
    expiryDate: string,
    description?: string,
    remainingClaims?: number
  }) {
    const code = await this.generateUniqueEasyCode(body.prefix || '', 6);
    
    return this.couponsService.createPublicCoupon({
      ...body,
      code,
      isActive: true
    });
  }
  @Get('released')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  async findReleasedCoupons() {
    return this.couponsService.findReleasedCoupons();
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  private async generateUniqueEasyCode(prefix: string = '', length: number = 6): Promise<string> {
    const characters = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
    let attempts = 0;
    const maxAttempts = 10;
    
    while (attempts < maxAttempts) {
      let result = prefix;
      
      if (prefix && !prefix.endsWith('-')) {
        result += '-';
      }
      
      for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
      }
      
      try {
        const existingCoupon = await this.couponModel.findOne({ code: result }).exec();
        
        if (!existingCoupon) {
          return result;
        }
        
        attempts++;
      } catch (error) {
        attempts++;
      }
    }
    
    const timestamp = Date.now().toString().slice(-6);
    const fallbackResult = prefix ? `${prefix}-${timestamp}` : `COUP${timestamp}`;
    return fallbackResult;
  }
  @Get('admin/overview')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles(Role.Admin)
  async getAdminCouponOverview() {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const allCoupons = await this.couponModel.find().exec();
      
      // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
      const publicCoupons = allCoupons.filter(c => 
        c.isPublic && !c.claimedBy && c.couponType === 'PUBLIC'
      );
      const surveyCoupons = allCoupons.filter(c => 
        c.isPublic && !c.claimedBy && c.couponType === 'SURVEY'
      );
      const claimedCoupons = allCoupons.filter(c => c.claimedBy);
      const usedCoupons = allCoupons.filter(c => c.isUsed);
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      const claimedByCouponType = {
        PUBLIC: claimedCoupons.filter(c => c.couponType === 'PUBLIC').length,
        SURVEY: claimedCoupons.filter(c => c.couponType === 'SURVEY').length,
        PRIVATE: claimedCoupons.filter(c => c.couponType === 'PRIVATE').length,
        SPECIAL: claimedCoupons.filter(c => c.couponType === 'SPECIAL').length
      };
      
      return {
        total: allCoupons.length,
        byType: {
          public: publicCoupons.length,
          survey: surveyCoupons.length,
          claimed: claimedCoupons.length,
          used: usedCoupons.length
        },
        claimedByType: claimedByCouponType,
        publicCoupons: publicCoupons.map(c => ({
          _id: c._id,
          code: c.code,
          discountPercent: c.discountPercent,
          description: c.description,
          expiryDate: c.expiryDate,
          remainingClaims: c.remainingClaims,
          isActive: c.isActive,
          createdAt: c.createdAt
        })),
        surveyCoupons: surveyCoupons.map(c => ({
          _id: c._id,
          code: c.code,
          discountPercent: c.discountPercent,
          description: c.description,
          expiryDate: c.expiryDate,
          remainingClaims: c.remainingClaims,
          isActive: c.isActive,
          createdAt: c.createdAt
        }))
      };
    } catch (error) {
      console.error('Error in getAdminCouponOverview:', error);
      throw new BadRequestException('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    }
  }
}