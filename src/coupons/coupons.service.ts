// src/coupons/coupons.service.ts
import { Injectable, NotFoundException, BadRequestException, ConflictException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Coupon, CouponDocument, CouponType } from './schemas/coupon.schema';
import { CreateCouponDto } from './dto/create-coupon.dto';
import { UpdateCouponDto } from './dto/update-coupon.dto';
import { CreatePublicCouponDto } from './dto/create-public-coupon.dto';

@Injectable()
export class CouponsService {
  constructor(
    @InjectModel(Coupon.name) private couponModel: Model<CouponDocument>,
  ) {}

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°...
  async create(createCouponDto: CreateCouponDto): Promise<Coupon> {
    if (createCouponDto.code) {
      const existingCoupon = await this.couponModel.findOne({ code: createCouponDto.code }).exec();
      if (existingCoupon) {
        throw new ConflictException(`Coupon with code ${createCouponDto.code} already exists`);
      }
    }
    
    const newCoupon = new this.couponModel({
      ...createCouponDto,
      expiryDate: new Date(createCouponDto.expiryDate)
    });
    
    return newCoupon.save();
  }

  async createPublicCoupon(createPublicCouponDto: CreatePublicCouponDto): Promise<Coupon> {
    if (createPublicCouponDto.code) {
      const existingCoupon = await this.couponModel.findOne({ code: createPublicCouponDto.code }).exec();
      if (existingCoupon) {
        throw new ConflictException(`Coupon with code ${createPublicCouponDto.code} already exists`);
      }
    }
    
    const newCoupon = new this.couponModel({
      ...createPublicCouponDto,
      expiryDate: new Date(createPublicCouponDto.expiryDate),
      isPublic: true,
      isClaimable: true,
      remainingClaims: createPublicCouponDto.remainingClaims || -1,
      // ‚úÖ ‡πÉ‡∏ä‡πâ couponType ‡∏à‡∏≤‡∏Å DTO ‡∏´‡∏£‡∏∑‡∏≠ default ‡πÄ‡∏õ‡πá‡∏ô PUBLIC
      couponType: createPublicCouponDto.couponType || CouponType.PUBLIC
    });
    
    return newCoupon.save();
  }

  async findAll(): Promise<Coupon[]> {
    return this.couponModel.find().exec();
  }

  async findPublicCoupons(): Promise<Coupon[]> {
    return this.couponModel.find({
      isPublic: true,
      isActive: true,
      isClaimable: true,
      expiryDate: { $gt: new Date() },
      couponType: CouponType.PUBLIC, // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PUBLIC type ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      $or: [
        { remainingClaims: -1 },
        { remainingClaims: { $gt: 0 } }
      ]
    }).exec();
  }
  
  async findSurveyCoupons(): Promise<Coupon[]> {
    return this.couponModel.find({
      isPublic: true,
      isActive: true,
      isClaimable: true,
      expiryDate: { $gt: new Date() },
      couponType: CouponType.SURVEY,
      $or: [
        { remainingClaims: -1 },
        { remainingClaims: { $gt: 0 } }
      ]
    }).exec();
  }

  async findOne(id: string): Promise<Coupon> {
    const coupon = await this.couponModel.findById(id).exec();
    if (!coupon) {
      throw new NotFoundException(`Coupon with ID ${id} not found`);
    }
    return coupon;
  }

  async findByCode(code: string): Promise<Coupon> {
    const coupon = await this.couponModel.findOne({ code }).exec();
    if (!coupon) {
      throw new NotFoundException(`Coupon with code ${code} not found`);
    }
    return coupon;
  }

  async update(id: string, updateCouponDto: UpdateCouponDto): Promise<Coupon> {
    if (updateCouponDto.code) {
      const existingCoupon = await this.couponModel.findOne({ 
        code: updateCouponDto.code,
        _id: { $ne: id }
      }).exec();
      
      if (existingCoupon) {
        throw new ConflictException(`Coupon with code ${updateCouponDto.code} already exists`);
      }
    }
    
    const updateData: any = { ...updateCouponDto };
    if (updateData.expiryDate) {
      updateData.expiryDate = new Date(updateData.expiryDate);
    }
    
    const updatedCoupon = await this.couponModel.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    ).exec();
    
    if (!updatedCoupon) {
      throw new NotFoundException(`Coupon with ID ${id} not found`);
    }
    
    return updatedCoupon;
  }

  async remove(id: string): Promise<void> {
    const result = await this.couponModel.deleteOne({ _id: id }).exec();
    if (result.deletedCount === 0) {
      throw new NotFoundException(`Coupon with ID ${id} not found`);
    }
  }

  async markAsUsed(id: string, orderId?: string): Promise<Coupon> {
    console.log('üîÑ Marking coupon as used:', { couponId: id, orderId });
    
    const updateData: any = {
      isUsed: true,
      usedAt: new Date()
    };
    
    if (orderId) {
      updateData.usedInOrder = new Types.ObjectId(orderId);
    }
    
    const updatedCoupon = await this.couponModel.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    ).exec();
    
    if (!updatedCoupon) {
      console.error('‚ùå Coupon not found for marking as used:', id);
      throw new NotFoundException(`Coupon with ID ${id} not found`);
    }
    
    console.log('‚úÖ Coupon marked as used successfully:', {
      id: updatedCoupon._id,
      code: updatedCoupon.code,
      isUsed: updatedCoupon.isUsed,
      usedAt: updatedCoupon.usedAt,
      usedInOrder: updatedCoupon.usedInOrder
    });
    
    return updatedCoupon;
  }


  async claimCoupon(couponId: string, userId: string): Promise<Coupon> {
    try {
      console.log('üîç Claiming coupon:', { couponId, userId });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
      if (!couponId || !userId) {
        throw new BadRequestException('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      }

      // ‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      const coupon = await this.couponModel.findById(couponId).exec();
      
      if (!coupon) {
        throw new NotFoundException(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${couponId}`);
      }
      
      console.log('üìã Found coupon:', {
        id: coupon._id,
        code: coupon.code,
        isPublic: coupon.isPublic,
        isActive: coupon.isActive,
        isClaimable: coupon.isClaimable
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
      if (!coupon.isActive || !coupon.isClaimable || !coupon.isPublic) {
        throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
      if (new Date() > coupon.expiryDate) {
        throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      if (coupon.remainingClaims !== -1 && coupon.remainingClaims <= 0) {
        throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const existingClaim = await this.couponModel.findOne({
        originalCouponId: new Types.ObjectId(couponId),
        claimedBy: new Types.ObjectId(userId)
      }).exec();
      
      if (existingClaim) {
        throw new BadRequestException('‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      console.log('‚úÖ All validations passed, creating user coupon...');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      const userCoupon = new this.couponModel({
        code: coupon.code,
        discountPercent: coupon.discountPercent,
        expiryDate: coupon.expiryDate,
        isActive: true,
        description: coupon.description || '',
        claimedBy: new Types.ObjectId(userId),
        claimedAt: new Date(),
        isPublic: false,
        isClaimable: false,
        originalCouponId: new Types.ObjectId(couponId),
        couponType: coupon.couponType // ‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å couponType ‡∏î‡πâ‡∏ß‡∏¢
      });
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      const savedUserCoupon = await userCoupon.save();
      console.log('üíæ User coupon saved:', savedUserCoupon._id);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î)
      if (coupon.remainingClaims !== -1) {
        await this.couponModel.findByIdAndUpdate(
          couponId,
          { remainingClaims: coupon.remainingClaims - 1 },
          { new: true }
        ).exec();
        console.log('üìä Updated remaining claims');
      }
      
      console.log('üéâ Coupon claimed successfully');
      return savedUserCoupon;
      
    } catch (error) {
      console.error('‚ùå Error in claimCoupon service:', error);
      throw error; // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ Controller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    }
  }

  async findUserCoupons(userId: string, includeUsed: boolean = false): Promise<Coupon[]> {
    console.log('üîç Finding user coupons:', { userId, includeUsed });
    
    const filter: any = {
      claimedBy: new Types.ObjectId(userId),
      isActive: true,
      expiryDate: { $gt: new Date() }
    };
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    if (!includeUsed) {
      filter.isUsed = false;
    }
    
    const userCoupons = await this.couponModel.find(filter)
      .populate('usedInOrder')
      .sort({ claimedAt: -1 })
      .exec();
    
    console.log(`üìä Found ${userCoupons.length} user coupons (includeUsed: ${includeUsed})`);
    
    return userCoupons;
  }

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç validateCoupon - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  async validateCoupon(code, afterPromotionPrice, userId?: string): Promise<Coupon> {
    try {
      console.log('üîç Validating coupon:', { code, afterPromotionPrice, userId });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input parameters
      if (!code || typeof code !== 'string') {
        throw new BadRequestException('‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
      
      if (typeof afterPromotionPrice !== 'number' || afterPromotionPrice <= 0) {
        throw new BadRequestException('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
      
      const cleanCode = code.trim().toUpperCase();
      
      // ‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á user ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ userId)
      if (userId) {
        console.log('üîç Looking for personal coupon first...');
        const personalCoupon = await this.couponModel.findOne({
          code: cleanCode,
          claimedBy: new Types.ObjectId(userId),
          isUsed: false,
          isActive: true
        }).exec();
        
        if (personalCoupon) {
          console.log('‚úÖ Found personal coupon:', personalCoupon._id);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
          if (new Date() > personalCoupon.expiryDate) {
            throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
          }
          
          console.log('‚úÖ Personal coupon validation successful');
          return personalCoupon;
        }
      }
      
      // ‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
      console.log('üîç Looking for public coupon...');
      let publicCoupon;
      try {
        publicCoupon = await this.findByCode(cleanCode);
      } catch (error) {
        if (error instanceof NotFoundException) {
          throw new BadRequestException('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
        }
        throw error;
      }
      
      console.log('üìã Found public coupon:', {
        id: publicCoupon._id,
        code: publicCoupon.code,
        isActive: publicCoupon.isActive,
        isUsed: publicCoupon.isUsed,
        isPublic: publicCoupon.isPublic,
        isClaimable: publicCoupon.isClaimable
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
      if (!publicCoupon.isActive) {
        throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      }
      
      if (new Date() > publicCoupon.expiryDate) {
        throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (publicCoupon.isPublic) {
        if (!userId) {
          throw new BadRequestException('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á');
        }
        
        console.log('üîç Checking if user claimed this public coupon...');
        const userClaimedCoupon = await this.couponModel.findOne({
          originalCouponId: publicCoupon._id,
          claimedBy: new Types.ObjectId(userId),
          isUsed: false,
          isActive: true
        }).exec();
        
        if (!userClaimedCoupon) {
          throw new BadRequestException('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ñ‡∏•‡∏°‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ñ‡∏•‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
        
        console.log('‚úÖ Found user claimed coupon:', userClaimedCoupon._id);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß
        if (new Date() > userClaimedCoupon.expiryDate) {
          throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
        }
        
        console.log('‚úÖ Public coupon validation successful - returning claimed coupon');
        return userClaimedCoupon; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà user ‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)
      if (publicCoupon.claimedBy) {
        if (!userId || publicCoupon.claimedBy.toString() !== userId) {
          throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
        }
      }
      
      if (publicCoupon.isUsed) {
        throw new BadRequestException('‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      console.log('‚úÖ Coupon validation successful');
      return publicCoupon;
      
    } catch (error) {
      console.error('‚ùå Coupon validation failed:', error.message);
      throw error;
    }
  }

  calculateDiscount(coupon: Coupon, afterPromotionPrice: number): number {
    const discountAmount = (afterPromotionPrice * coupon.discountPercent) / 100;
    return Math.floor(discountAmount);
  }
  
  async findSurveyCouponByUser(userId: string): Promise<Coupon | null> {
    const coupon = await this.couponModel.findOne({
      claimedBy: new Types.ObjectId(userId),
      couponType: CouponType.SURVEY
    }).exec();
    
    return coupon;
  }

  async releaseCoupon(orderId: string): Promise<void> {
  console.log('üîÑ Releasing coupons for deleted order:', orderId);
  
  try {
    // ‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Order ‡∏ô‡∏µ‡πâ
    const usedCoupons = await this.couponModel.find({
      usedInOrder: new Types.ObjectId(orderId),
      isUsed: true
    }).exec();
    
    if (usedCoupons.length === 0) {
      console.log('‚ÑπÔ∏è No coupons found for order:', orderId);
      return;
    }
    
    console.log(`üé´ Found ${usedCoupons.length} coupon(s) to release:`, 
      usedCoupons.map(c => ({ id: c._id, code: c.code }))
    );
    
    // Reset ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Order ‡∏ô‡∏µ‡πâ
    const updateResult = await this.couponModel.updateMany(
      {
        usedInOrder: new Types.ObjectId(orderId),
        isUsed: true
      },
      {
        $set: {
          isUsed: false,
          usedAt: null,
          usedInOrder: null
        }
      }
    ).exec();
    
    console.log(`‚úÖ Released ${updateResult.modifiedCount} coupon(s) successfully`);
    
    // Log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å release
    usedCoupons.forEach(coupon => {
      console.log(`üé´ Coupon released: ${coupon.code} (ID: ${coupon._id})`);
    });
    
  } catch (error) {
    console.error('‚ùå Error releasing coupons:', error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Order
  }
}


  async findReleasedCoupons(limit: number = 50): Promise<Coupon[]> {
    // ‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏ñ‡∏π‡∏Å release (usedAt ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà isUsed ‡πÄ‡∏õ‡πá‡∏ô false)
    return this.couponModel.find({
      isUsed: false,
      usedAt: { $ne: null }, // ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
      usedInOrder: null
    })
    .sort({ usedAt: -1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    .limit(limit)
    .exec();
  }

  async createSurveyCoupon(userId: string): Promise<Coupon> {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö survey coupon ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingSurveyCoupon = await this.findSurveyCouponByUser(userId);
    
    if (existingSurveyCoupon) {
      throw new BadRequestException('‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    const randomCode = await this.generateUniqueSurveyCode();
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const expiryDate = new Date();
    expiryDate.setMonth(expiryDate.getMonth() + 3);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°)
    const newCoupon = new this.couponModel({
      code: randomCode,
      discountPercent: 15,
      expiryDate: expiryDate,
      description: '‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°',
      isActive: true,
      isPublic: false, // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      isClaimable: false, // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏•‡∏°
      couponType: CouponType.SURVEY,
      claimedBy: new Types.ObjectId(userId),
      claimedAt: new Date()
    });
    
    return newCoupon.save();
  }

    private async generateUniqueSurveyCode(): Promise<string> {
    const prefix = 'SUR';
    let attempts = 0;
    const maxAttempts = 10;
    
    while (attempts < maxAttempts) {
      const numbers = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
      const code = `${prefix}${numbers}`;
      
      try {
        const existingCoupon = await this.couponModel.findOne({ code }).exec();
        
        if (!existingCoupon) {
          return code;
        }
        
        attempts++;
      } catch (error) {
        attempts++;
      }
    }
    
    const timestamp = Date.now().toString().slice(-4);
    return `${prefix}${timestamp}`;
  }
}